{"version":3,"sources":["Messages.jsx","ChatBox.jsx","MessageBox.jsx","Chat.jsx","App.js","serviceWorker.js","index.js"],"names":["Messages","props","className","style","message","ChatBox","id","type","placeholder","onKeyDown","accept","MessageBox","messages","URL","Chat","state","ws","WebSocket","handleAccept","bind","onPressEnter","val","this","handlePost","updateState","push","setState","require","post","text","then","res","console","log","data","catch","error","onopen","onmessage","evt","JSON","parse","onclose","e","key","target","value","send","stringify","map","entry","Component","App","document","body","background","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RASeA,EAPE,SAACC,GAAD,OACb,yBAAKC,UAAY,oBAAoBC,MAAO,CAAC,cAAe,SACxD,yBAAKA,MAAO,CAAC,cAAe,SAA5B,QACA,6BAAMF,EAAMG,WCGLC,EANC,SAACJ,GAAD,OACZ,yBAAKC,UAAW,YACZ,2BAAOI,GAAG,OAAOC,KAAO,OAAOC,YAAc,iBAAkBC,UAAaR,EAAMS,WCI3EC,EANI,SAACV,GAAD,OACf,yBAAKC,UAAY,eACZD,EAAMW,WCETC,EAAM,6BAmGGC,E,kDA/FX,WAAYb,GAAQ,IAAD,8BAEf,cAAMA,IACDc,MAAQ,CACTX,QAAS,IAGb,EAAKY,GAAK,IAAIC,UAAUJ,GACxB,EAAKK,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATL,E,yDAYNE,GAGTC,KAAKC,WAAWF,GAEhBC,KAAKE,YAAYH,K,kCAGTA,GAAM,IAERjB,EAAYkB,KAAKP,MAAjBX,QAENA,EAAQqB,KAAKJ,GACbC,KAAKI,SAAS,CACVtB,c,iCAIGiB,GAEOM,EAAQ,IAEhBC,KAAK,2CAA4C,CAACC,KAAKR,IAC5DS,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAAIG,SAEnBC,OAAM,SAAAC,GACHJ,QAAQC,IAAI,QAASG,Q,0CAIR,IAAD,OAEhBd,KAAKN,GAAGqB,OAAS,WAEfL,QAAQC,IAAI,cAGdX,KAAKN,GAAGsB,UAAY,SAAAC,GAElB,IAAMnC,EAAUoC,KAAKC,MAAMF,EAAIL,MAC/B,EAAKV,YAAYpB,EAAQyB,OAG3BP,KAAKN,GAAG0B,QAAU,WAChBV,QAAQC,IAAI,gBAEZ,EAAKP,SAAS,CACZV,GAAI,IAAIC,UAAUJ,Q,mCAKZ8B,GAIV,GAFAX,QAAQC,IAAK,0BAEC,UAAVU,EAAEC,IAAiB,CAEnB,IAAMxC,EAAU,CAACyB,KAAMc,EAAEE,OAAOC,OAChCxB,KAAKN,GAAG+B,KAAKP,KAAKQ,UAAU5C,IAE5BkB,KAAKF,aAAauB,EAAEE,OAAOC,U,+BAKzB,IAGAlC,EADcU,KAAKP,MAAjBX,QACiB6C,KAAI,SAACC,GAAD,OAAS,kBAAC,EAAD,CAAU9C,QAAW8C,OAE3D,OACI,yBAAKhD,UAAY,kBACb,yBAAKA,UAAU,2DACX,kBAAC,EAAD,CAAYU,SAAYA,IACxB,kBAAC,EAAD,CAASF,OAAUY,KAAKJ,qB,GA1FzBiC,a,MCGJC,MAPf,WAEE,OADAC,SAASC,KAAKnD,MAAMoD,WAAa,UAE/B,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFV,SAASW,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAC,GACLJ,QAAQI,MAAMA,EAAMhC,c","file":"static/js/main.4ac493f4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Messages = (props) => (\r\n    <div className = \"message-container\" style={{\"padding-top\": \"10px\"}}>\r\n        <div style={{\"font-weight\": \"bold\"}}>You:</div>\r\n        <div>{props.message}</div>\r\n    </div>\r\n);\r\n\r\nexport default Messages;","import React from 'react';\r\n\r\nconst ChatBox = (props) => (\r\n    <div className= \"chat-box\">\r\n        <input id=\"chat\" type = \"text\" placeholder = \"Type a Message\"  onKeyDown = {props.accept} />\r\n    </div>\r\n);\r\n\r\nexport default ChatBox;","import React from 'react';\n\nconst MessageBox = (props) => (\n    <div className = \"message-box\">\n        {props.messages}\n    </div>\n);\n\nexport default MessageBox;","import React from 'react';\r\nimport { Component } from 'react';\r\nimport Messages from './Messages';\r\nimport ChatBox from './ChatBox';\r\nimport MessageBox from './MessageBox';\r\n\r\nconst URL = 'ws://6c3ce43b5086.ngrok.io'; // port is 3030\r\n\r\nclass Chat extends Component {\r\n    \r\n    constructor(props) {\r\n    \r\n        super(props);\r\n        this.state = {\r\n            message: [],\r\n        }\r\n\r\n        this.ws = new WebSocket(URL);\r\n        this.handleAccept = this.handleAccept.bind(this);\r\n        this.onPressEnter = this.onPressEnter.bind(this);\r\n    }\r\n\r\n    onPressEnter(val) {\r\n        \r\n        // make a post request\r\n        this.handlePost(val);\r\n\r\n        this.updateState(val);\r\n    }\r\n\r\n    updateState(val) {\r\n\r\n        var { message } = this.state;\r\n\r\n        message.push(val);\r\n        this.setState({\r\n            message,\r\n        });\r\n    }\r\n\r\n    handlePost(val) {\r\n\r\n        const axios = require('axios');\r\n\r\n        axios.post('http://eaccb35115a3.ngrok.io/postMessage', {text:val}) //port is 8080\r\n        .then(res=>{\r\n            console.log(res.data);\r\n        })\r\n        .catch(error=>{\r\n            console.log('Error', error);\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        this.ws.onopen = () => {\r\n          // on connecting, do nothing but log it to the console\r\n          console.log('connected');\r\n        }\r\n    \r\n        this.ws.onmessage = evt => {\r\n          // on receiving a message, add it to the list of messages\r\n          const message = JSON.parse(evt.data);\r\n          this.updateState(message.text);\r\n        }\r\n    \r\n        this.ws.onclose = () => {\r\n          console.log('disconnected');\r\n          // automatically try to reconnect on connection loss\r\n          this.setState({\r\n            ws: new WebSocket(URL),\r\n          });\r\n        }\r\n    }\r\n\r\n    handleAccept (e) {\r\n\r\n        console.log (\"Handle Accept Invoked.\");\r\n\r\n        if (e.key === 'Enter') {\r\n            \r\n            const message = {text: e.target.value};\r\n            this.ws.send(JSON.stringify(message));\r\n\r\n            this.onPressEnter(e.target.value);\r\n        }\r\n            \r\n    }\r\n\r\n    render() {\r\n        \r\n        const { message } = this.state;\r\n        const messages = message.map((entry)=><Messages message = {entry} />);\r\n        \r\n        return (\r\n            <div className = \"container-flex\">\r\n                <div className=\"container text-green border-thick-green border-round-50\">\r\n                    <MessageBox messages = {messages} />\r\n                    <ChatBox accept = {this.handleAccept} />\r\n                </div>\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Chat;","import React from 'react';\nimport Chat from './Chat';\nimport './App.css';\n\nfunction App() {\n  document.body.style.background = \"#000000\";\n  return (\n    <Chat />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}